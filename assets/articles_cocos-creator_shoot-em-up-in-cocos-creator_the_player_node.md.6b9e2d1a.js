import{_ as e}from"./chunks/shoot-em-up.b8536380.js";import{_ as t,o as a,c as o,a as s}from"./app.f128caef.js";const b=JSON.parse(`{"title":"Cocos Creator","titleTemplate":"Shoot 'em up in Cocos Creator the Player Node","description":"Shoot 'em up in Cocos Creator the Player Node","frontmatter":{"title":"Cocos Creator","titleTemplate":"Shoot 'em up in Cocos Creator the Player Node","description":"Shoot 'em up in Cocos Creator the Player Node","Author":"Daniele Tabanella","head":[["meta",{"name":"keywords","content":"cocos creator"}]],"Updated":"2022-12-16T00:00:00.000Z","lastUpdated":false,"image":"/images/shoot-em-up.png"},"headers":[{"level":3,"title":"The Player Node is the main character of the game, it's a spaceship that can move and shoot lasers. It contains a lot of components, but we will see them one by one.","slug":"the-player-node-is-the-main-character-of-the-game-it-s-a-spaceship-that-can-move-and-shoot-lasers-it-contains-a-lot-of-components-but-we-will-see-them-one-by-one","link":"#the-player-node-is-the-main-character-of-the-game-it-s-a-spaceship-that-can-move-and-shoot-lasers-it-contains-a-lot-of-components-but-we-will-see-them-one-by-one","children":[]},{"level":2,"title":"The Player Children Nodes","slug":"the-player-children-nodes","link":"#the-player-children-nodes","children":[]},{"level":2,"title":"The Components","slug":"the-components","link":"#the-components","children":[]},{"level":2,"title":"The built-in Components","slug":"the-built-in-components","link":"#the-built-in-components","children":[]},{"level":2,"title":"The Player.ts script","slug":"the-player-ts-script","link":"#the-player-ts-script","children":[]},{"level":2,"title":"The PlayerInput.ts script","slug":"the-playerinput-ts-script","link":"#the-playerinput-ts-script","children":[]}],"relativePath":"articles/cocos-creator/shoot-em-up-in-cocos-creator/the_player_node.md","lastUpdated":1672993309000}`),n={name:"articles/cocos-creator/shoot-em-up-in-cocos-creator/the_player_node.md"},l=s('<p><img src="'+e+`" alt="Shoot &#39;em up in Cocos Creator"></p><h1 id="the-player-node" tabindex="-1">The Player Node <a class="header-anchor" href="#the-player-node" aria-hidden="true">#</a></h1><h3 id="the-player-node-is-the-main-character-of-the-game-it-s-a-spaceship-that-can-move-and-shoot-lasers-it-contains-a-lot-of-components-but-we-will-see-them-one-by-one" tabindex="-1">The Player Node is the main character of the game, it&#39;s a spaceship that can move and shoot lasers. It contains a lot of components, but we will see them one by one. <a class="header-anchor" href="#the-player-node-is-the-main-character-of-the-game-it-s-a-spaceship-that-can-move-and-shoot-lasers-it-contains-a-lot-of-components-but-we-will-see-them-one-by-one" aria-hidden="true">#</a></h3><h2 id="the-player-children-nodes" tabindex="-1">The <code>Player</code> Children Nodes <a class="header-anchor" href="#the-player-children-nodes" aria-hidden="true">#</a></h2><p>The Player has 2 children nodes, the <code>Engine</code>, which is a particle system, and the <code>Ship</code> which is a sprite. I&#39;ve found that in many tutorials the player node contains the sprite component, but I think it&#39;s better to use a sprite as a child of a node, so you can add other components (sprite or particles) to the player node.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Player</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Engine</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ Ship</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="the-components" tabindex="-1">The Components <a class="header-anchor" href="#the-components" aria-hidden="true">#</a></h2><p>The Player Node has 10 components, 3 of them are built-in components, the others are custom scripts. We will see them one by one.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Player</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ cc.UITransform</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ cc.CircleCollider2D</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ cc.RigidBody2D</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Player.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ PlayerInput.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Health.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ DamageDealer.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Shooter.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ FireHomingMissile.ts</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="the-built-in-components" tabindex="-1">The built-in Components <a class="header-anchor" href="#the-built-in-components" aria-hidden="true">#</a></h2><p><code>cc.UITransform</code> is a built-in component that allows you to position the node in the UI. It&#39;s not necessary for the player, but it&#39;s useful to see the position of the node in the editor. <code>cc.CircleCollider2D</code> is a built-in component that allows you to add a circle collider to the node. A circle in this case is better to handle the shape of the ship. <code>cc.RigidBody2D</code> is a built-in component that allows you to add a rigid body to the node, as there&#39;s no physic involved in this game we use it only to detect collisions.</p><h2 id="the-player-ts-script" tabindex="-1">The <code>Player.ts</code> script <a class="header-anchor" href="#the-player-ts-script" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/theRenard/cocos-creator-laser-defender/blob/master/assets/Scripts/Player.ts" target="_blank" rel="noreferrer"><code>Player.ts</code></a> script handles the player position, it respect the boundaries of the parent node with the <code>math.clamp</code> utility. the <code>move</code> method is called in the <code>update</code> method and it take into account both <code>deltatime</code> (<a href="https://drewcampbell92.medium.com/understanding-delta-time-b53bf4781a03" target="_blank" rel="noreferrer">why?</a>) and <code>movespeed</code> variables. It exposes also the <code>onMove</code> and <code>onFire</code> methods that are called by the <code>PlayerInput.ts</code> script.</p><h2 id="the-playerinput-ts-script" tabindex="-1">The <code>PlayerInput.ts</code> script <a class="header-anchor" href="#the-playerinput-ts-script" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/theRenard/cocos-creator-laser-defender/blob/master/assets/Scripts/PlayerInput.ts" target="_blank" rel="noreferrer"><code>PlayerInput.ts</code></a> script handles the player input, it&#39;s a very simple script that uses the <code>input.on</code> method for events <code>KEY_DOWN</code>, <code>KEY_DOWN</code> and <code>GAMEPAD_INPUT</code>. When the event occurs it calls the <code>onMove</code> or <code>onFire</code> methods of the <code>Player.ts</code> class. It handles also the deadzone of the gamepad to avoid drift.</p>`,15),r=[l];function c(i,h,p,d,m,y){return a(),o("div",null,r)}const f=t(n,[["render",c]]);export{b as __pageData,f as default};
