import{_ as e,o as a,c as n,a as s}from"./app.40f7adeb.js";const t="/assets/enemy.c6e2f68f.png",o="/assets/waypoints.d2d14c43.png",c="/assets/waypoints.568251e5.gif",u=JSON.parse(`{"title":"Cocos Creator","titleTemplate":"Shoot 'em up in Cocos Creator the Enemies","description":"Shoot 'em up in Cocos Creator the Enemies","frontmatter":{"title":"Cocos Creator","titleTemplate":"Shoot 'em up in Cocos Creator the Enemies","description":"Shoot 'em up in Cocos Creator the Enemies","Author":"Daniele Tabanella","head":[["meta",{"name":"keywords","content":"cocos creator"}]],"Updated":"2022-12-16T00:00:00.000Z","lastUpdated":false},"headers":[{"level":2,"title":"The GameManager node","slug":"the-gamemanager-node","link":"#the-gamemanager-node","children":[]},{"level":2,"title":"The WaveFactory component","slug":"the-wavefactory-component","link":"#the-wavefactory-component","children":[]},{"level":2,"title":"The Waveprefab","slug":"the-waveprefab","link":"#the-waveprefab","children":[]},{"level":2,"title":"The EnemyFactory component","slug":"the-enemyfactory-component","link":"#the-enemyfactory-component","children":[]},{"level":2,"title":"The Enemy prefab","slug":"the-enemy-prefab","link":"#the-enemy-prefab","children":[]},{"level":2,"title":"The Enemy component","slug":"the-enemy-component","link":"#the-enemy-component","children":[]},{"level":2,"title":"The Score component","slug":"the-score-component","link":"#the-score-component","children":[]},{"level":2,"title":"The Path prefab","slug":"the-path-prefab","link":"#the-path-prefab","children":[]},{"level":2,"title":"Wrapping up","slug":"wrapping-up","link":"#wrapping-up","children":[]}],"relativePath":"articles/cocos-creator/shoot-em-up-in-cocos-creator/the_enemies.md","lastUpdated":1674074675000}`),r={name:"articles/cocos-creator/shoot-em-up-in-cocos-creator/the_enemies.md"},p=s('<h1 id="ðŸ‘¾-the-enemies" tabindex="-1">ðŸ‘¾ The Enemies <a class="header-anchor" href="#ðŸ‘¾-the-enemies" aria-hidden="true">#</a></h1><p><img src="'+t+`" alt="The enemy prefab"></p><h2 id="the-gamemanager-node" tabindex="-1">The <code>GameManager</code> node <a class="header-anchor" href="#the-gamemanager-node" aria-hidden="true">#</a></h2><p>The <code>GameManager</code> node is very important as it&#39;s responsible for the spawning of the enemies thanks to the <code>WaveFactory</code> component. It keeps also track of the score thanks to the <code>scoreKeeper</code> components that import the <code>scoreManager</code> instance.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">GameManager</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ WaveFactory</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”œâ”€ Wave Prefab</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”‚  â””â”€ EnemyFactory</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”‚     â”œâ”€ ...</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”‚     â”œâ”€ Enemy</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”‚     â””â”€ Enemy</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”œâ”€ ...</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â”œâ”€ Wave Prefab</span></span>
<span class="line"><span style="color:#A6ACCD;">â”‚  â””â”€ Wave Prefab</span></span>
<span class="line"><span style="color:#A6ACCD;">â””â”€ ScoreKeeper</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="the-wavefactory-component" tabindex="-1">The <code>WaveFactory</code> component <a class="header-anchor" href="#the-wavefactory-component" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/theRenard/cocos-creator-laser-defender/blob/master/assets/Scripts/WaveFactory.ts" target="_blank" rel="noreferrer"><code>WaveFactory.ts</code></a> is responsible for spawning waves of enemies. It can loop through an array of <code>Wave</code> prefabs. When the scene starts the script creates a generator that yields all the waves. The wave instantiates the enemies and then after a given amount of time it instantiates the next one.</p><h2 id="the-waveprefab" tabindex="-1">The <code>Wave</code>prefab <a class="header-anchor" href="#the-waveprefab" aria-hidden="true">#</a></h2><p>The <code>Wave</code> prefab is a container for enemies. It contains just one component, <code>EnemyFactory</code>, the script that instantiates the enemies and lets them follow a given path in the scene.</p><h2 id="the-enemyfactory-component" tabindex="-1">The <code>EnemyFactory</code> component <a class="header-anchor" href="#the-enemyfactory-component" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/theRenard/cocos-creator-laser-defender/blob/master/assets/Scripts/EnemyFactory.ts" target="_blank" rel="noreferrer"><code>EnemyFactory.ts</code></a> script handles the instantiation of the enemies (like <code>WaveFactory</code> does for waves, but this time the prefab is an <code>Enemy</code> node). It accepts an array of <code>Enemy</code> prefabs so that you can have different enemies in the same wave. It also accepts a <code>Path</code> prefab, so that every wave can have its path. It&#39;s time now to see how the <code>Enemy</code> prefab works.</p><h2 id="the-enemy-prefab" tabindex="-1">The <code>Enemy</code> prefab <a class="header-anchor" href="#the-enemy-prefab" aria-hidden="true">#</a></h2><p>The Enemy prefab has 8 components, 3 of them are built-in components, and the others are custom scripts. It is very similar to the <code>Player</code> node and we already discussed most of its components. It doesn&#39;t have <code>PlayerController</code> script but it has <code>Enemy</code> and <code>Score</code> components.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Enemy</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ cc.UITransform</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ cc.CircleCollider2D</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ cc.RigidBody2D</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Enemy.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Health.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ DamageDealer.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Shooter.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">â””â”€ Score.ts</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="the-enemy-component" tabindex="-1">The <code>Enemy</code> component <a class="header-anchor" href="#the-enemy-component" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/theRenard/cocos-creator-laser-defender/blob/master/assets/Scripts/Enemy.ts" target="_blank" rel="noreferrer"><code>Enemy.ts</code></a> script is responsible for the enemy movement. It has the <code>followPath</code> method that iterates through some waypoints (waypoints are in the <code>Path</code> prefab but we&#39;ll get to that later) and it uses the <code>cc.tween</code> API to move the enemy from one waypoint to the next. When the enemy reaches the last waypoint which is outside of the camera boundaries it is destroyed.</p><h2 id="the-score-component" tabindex="-1">The <code>Score</code> component <a class="header-anchor" href="#the-score-component" aria-hidden="true">#</a></h2><p>The <a href="https://github.com/theRenard/cocos-creator-laser-defender/blob/master/assets/Scripts/Score.ts" target="_blank" rel="noreferrer"><code>Score.ts</code></a> script is responsible for adding points to the score when the enemy is destroyed. It has a <code>score</code> property that is set by the inspector. When the enemy is destroyed the <code>ScoreKeeper</code> component is notified and the score is updated.</p><h2 id="the-path-prefab" tabindex="-1">The <code>Path</code> prefab <a class="header-anchor" href="#the-path-prefab" aria-hidden="true">#</a></h2><p>The <code>Path</code> prefab is a container for the waypoints. Waypoints are just regular nodes positioned in the scene. The <code>Enemy</code> component uses the <code>Path</code> component (it gets it from its parent, the <code>Wave</code> prefab) to follow the waypoints, giving the illusion of a path.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Path</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-001</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-002</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-003</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-004</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-005</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-006</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€ Waypoint-007</span></span>
<span class="line"><span style="color:#A6ACCD;">â””â”€ Waypoint-008</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="`+o+'" alt="A Prefab with its waypoints"></p><p>Paths can be very complex like the one in the image below that is used for the boss.</p><p><img src="'+c+'" alt="A complex path"></p><h2 id="wrapping-up" tabindex="-1">Wrapping up <a class="header-anchor" href="#wrapping-up" aria-hidden="true">#</a></h2><p>So this is it, we have now all the pieces to build a shoot &#39;em up game. I hope you enjoyed this tutorial and that you learned something new. Stay tuned for the next article!</p>',26),i=[p];function l(h,d,m,y,f,C){return a(),n("div",null,i)}const g=e(r,[["render",l]]);export{u as __pageData,g as default};
